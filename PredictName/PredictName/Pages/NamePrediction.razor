@page "/namesprediction"
@inject HttpClient Http
@using PredictName

<PageTitle>Predict Name</PageTitle>
<h1 class="text-center text-primary border bg-light">Predict Nationaility of the Name</h1>
<div class="text-center bg-light m-2 p-2">
  <h3 class="text-center">Select single name or bulk names to predict?</h3>
    <button class="btn btn-primary mx-2" @onclick=@( o => Option = "single" )>Single Name</button>
    <button class="btn btn-primary mx-2" @onclick=@( o => Option = "bulk" )>Bulk Names</button>
    <button class="btn btn-warning mx-2" @onclick="Clear">Clear</button>
</div>
@if (Option == "single")
{
    <div class="m-2 text-center">
    <input type="text" placeholder="Enter Name" @bind="NameIn"/>
    <button @onclick="GetPrediction">Enter</button>
    </div>

    @if (prediction == null)
    {
                    <h4 class="text-center m-2">Enter in a Name</h4>
    }
    else
    {
            <div class="bg-light border m-2">
            <h2 class="text-center" id="name" >@prediction.Name.ToUpper()</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Countries</th>
                        <th>Probability</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var country in prediction.Country)
                {
                            <tr>
                                <td>@country.Country_Id</td>
                                <td>@country.Probability %</td>
                            </tr>
                }
                </tbody>
            </table>
            </div>
    }
}
else if (Option == "bulk")
{
        <div class= "border  bg-light m-2" style="height:250px">
        <h3 class="text-center m-1">Entered Names</h3>
    @foreach (var name in BulkNames) {
        <h4 class="d-inline-block mx-3">@name</h4>
    }
    </div>

    <div>
        @if (BulkNames.Count != 10)
        {
            <div class="text-center">
            <input type="text" placeholder="Enter Name" @bind="NameIn"/>
            <button class="btn btn-success mx-1" @onclick="AddName">Add</button>
            </div>
        }
        else
        {
        <h4 class="text-center text-error">Maximum reached: 10 names</h4>
        }
    </div>

    <div class="text-center m-3">
            <button class="btn btn-primary mx-1" @onclick="GetBulkPredictions">Get Predictions</button>
    </div>

    @if (bulkpredictons == null)
    {
        <h4 class="text-center">Enter in Names</h4>
    }
    else
    {
        @foreach (var prediction in bulkpredictons)
        {   
            <div class="bg-light border m-2">
            <h2 class="text-center" id="name" >@prediction.Name.ToUpper()</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Countries</th>
                        <th>Probability</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var country in prediction.Country)
                    {
                        <tr>
                            <td>@country.Country_Id</td>
                            <td>@country.Probability %</td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        }
    }

}
else
{
        <p class="text-center"><h1>Select an option</h1></p>
}


@code {
    public string? NameIn { get; set; }
    public string? Option {get; set;}
    private Prediction? prediction;
    private Prediction[]? bulkpredictons;
    private List<string>? BulkNames = new(10);

    protected async Task GetPrediction()
    {
        try
        {
            prediction = await Http.GetFromJsonAsync<Prediction>($"https://api.nationalize.io/?name={NameIn}");
        }
        catch
        {
            throw new ArgumentException("A name has to be entered");
        }
    }

    protected async Task GetBulkPredictions()
    {   try 
        {
            if (BulkNames.Count() <= 10) {
                string filter = "";
                foreach (var name in BulkNames) {
                    filter += $"name[]={name}&";
                }
                filter = filter.Remove(filter.Length - 1);
                bulkpredictons = await Http.GetFromJsonAsync<Prediction[]>($"https://api.nationalize.io/?{filter}");
            }
            else {
                throw new ArgumentException("There can only be up to 10 names entered at one go");
            }
        }
        catch {
            throw new ArgumentException("There has to be atleast one name entered");
        }
    }

    protected void AddName() {
        if (BulkNames.FirstOrDefault(b => b.ToUpper() == NameIn.ToUpper()) == null)
        {
            BulkNames.Add(NameIn);
        }
        else
        {
            throw new ArgumentException("Name is already entered: " + NameIn);
        }
        NameIn = null;
    }

    protected void Clear() {
        Option = null;
        BulkNames = new();
        NameIn = null;
        bulkpredictons = new Prediction[0];
        prediction = null;
    }
}
